using {{projectname}}.Application.Common.Interfaces;
using {{projectname}}.Domain.Notifications;

namespace {{projectname}}.Application.Features.Commands.{{command}};

public class {{command}}CommandHandler : IRequestHandler<{{command}}Command, {{command}}CommandResponse?>
{
    private readonly IUnitOfWork _unitOfWork;
    private readonly IMediator _mediator;
    public {{command}}CommandHandler(IUnitOfWork unitOfWork, IMediator mediator)
    {
        _unitOfWork = unitOfWork;
        _mediator = mediator;
    }

    public async Task<{{command}}CommandResponse?> Handle({{command}}Command request, CancellationToken cancellationToken)
    {

            _unitOfWork.Commit();
            await _mediator.Publish(new DomainSuccesNotification("{{command}}", "Operation successful"), cancellationToken);
            var response = new {{command}}CommandResponse { };
            return response;    
    }
}